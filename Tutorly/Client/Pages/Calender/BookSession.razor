@page "/calendar/book"
@inject JwtHttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using Tutorly.Shared
@using Tutorly.Client.Services

<PageTitle>Study Rooms | Tutorly</PageTitle>

<div id="page-rooms">
    <!-- ================== NAVBAR ================== -->
    <header class="db-topbar">
        <div class="db-topbar__inner">
            <div class="db-topbar__left">
                <button id="themeToggle" class="db-toggle" title="Toggle theme" aria-label="Toggle theme" onclick="toggleTheme()">
                    <svg class="icon-sun" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="4"></circle>
                        <path d="M12 2v2M12 20v2M2 12h2M20 12h2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" />
                    </svg>
                    <svg class="icon-moon" viewBox="0 0 24 24" fill="currentColor"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" /></svg>
                </button>
                <a class="db-brand" href="/dashboard">
                    <span class="db-brand__logo"><svg class="db-logo" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" /></svg></span>
                    <span class="db-brand__text">Tutorly</span>
                </a>
            </div>

            <nav class="db-nav" id="mainNav">
                <a class="db-nav__link" href="/dashboard"><svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 9.5 12 3l9 6.5V21a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1z" /></svg><span>Home</span></a>
                <a class="db-nav__link" href="/modules"><svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 3h8v8H3zM13 3h8v8h-8zM3 13h8v8H3zM13 13h8v8h-8z" /></svg><span>Modules</span></a>
                <a class="db-nav__link" href="/forum"><svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a4 4 0 0 1-4 4H9l-5 3V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z" /></svg><span>Forum</span></a>
                <a class="db-nav__link" href="/calendar/overview"><svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 2v4M16 2v4M3 10h18M5 22h14a2 2 0 0 0 2-2V8H3v12a2 2 0 0 0 2 2z" /></svg><span>Meetings</span></a>
                <a class="db-nav__link db-nav__link--active" href="/calendar/book" aria-current="page">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 22V4a2 2 0 0 1 2-2h12v20M8 6h8M8 10h8M8 14h5" /></svg>
                    <span>Rooms</span>
                </a>
            </nav>

            <div class="db-actions" id="actionsBar">
                <div class="search-wrap" id="searchWrap">
                    <button class="db-iconbtn" aria-label="Search" id="btnSearch">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z" /></svg>
                    </button>
                    <input id="searchInput" type="text" placeholder="Search…">
                </div>
                <div style="position:relative">
                    <button class="db-iconbtn" aria-haspopup="true" aria-expanded="false" id="btnNotif">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M15 18H6l1-1v-5a5 5 0 0 1 10 0v5l1 1h-3Zm-6 0a3 3 0 0 0 6 0" /></svg>
                    </button>
                    <div class="pop" id="popNotif" role="menu" aria-label="Notifications">
                        <div class="pop__head">Notifications</div>
                        <ul class="pop__list">
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">🎓</div><div><div class="pop__title">New badge unlocked</div><div class="pop__text">You earned “Active Learner”.</div></div></div></li>
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">💬</div><div><div class="pop__title">Reply from Anouk</div><div class="pop__text">She commented on your code review thread.</div></div></div></li>
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">📅</div><div><div class="pop__title">Session reminder</div><div class="pop__text">Query Review starts tomorrow at 1:00 PM.</div></div></div></li>
                        </ul>
                    </div>
                </div>
                <div style="position:relative">
                    <button class="db-avatar" aria-haspopup="true" aria-expanded="false" id="btnProfile">
                        <img id="avatarImg" src="https://i.pravatar.cc/40?img=3" alt="Profile" />
                    </button>
                    <div class="pop" id="popProfile" role="menu" aria-label="Profile menu" style="width:280px">
                        <div class="pop__head">My Profile</div>
                        <ul class="pop__list">
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">🖼️</div><div><div class="pop__title">Change Photo</div><div class="pop__text">Upload a new profile picture.</div></div></div></li>
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">⚙️</div><div><div class="pop__title">Settings</div><div class="pop__text">Manage account and preferences.</div></div></div></li>
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">🏆</div><div><div class="pop__title">Achievements</div><div class="pop__text">See all earned badges.</div></div></div></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- ================== STUDY ROOMS ================== -->
    <div class="rooms-wrap">
        <h1 class="rooms-title">Study Rooms</h1>

        @if (isLoading)
        {
            <div style="text-align:center;padding:40px">
                <p>Loading rooms...</p>
            </div>
        }
        else if (!rooms.Any())
        {
            <div style="text-align:center;padding:40px">
                <p>No active rooms. Create one to get started!</p>
            </div>
        }

        <div class="rooms-grid">
            @foreach (var room in rooms)
            {
                <article class="room">
                    <div style="display:flex;align-items:center;gap:10px;justify-content:space-between">
                        <h3>@room.RoomName</h3>
                        <div style="display:flex;align-items:center;gap:10px">
                            @if (room.RoomType == "StudentSession")
                            {
                                <span class="badge badge-blue">Student Session</span>
                            }
                            else if (room.RoomType == "TutorSession")
                            {
                                <span class="badge badge-green">Tutor Session</span>
                            }
                            else
                            {
                                <span class="badge badge-gray">Standalone</span>
                            }
                            <div class="meta"><span class="dot"></span><small>@room.CurrentParticipantCount online</small></div>
                        </div>
                    </div>
                    <p class="desc">@(room.Description ?? "Join and start learning together")</p>
                    <div class="people">
                        <div class="faces">
                            @foreach (var participant in room.Participants.Take(3))
                            {
                                <img src="@participant.AvatarUrl" alt="@participant.UserName">
                            }
                        </div>
                        @if (room.CurrentParticipantCount > 3)
                        {
                            <span>+@(room.CurrentParticipantCount - 3) others</span>
                        }
                        else if (room.CurrentParticipantCount == 0)
                        {
                            <span>Be the first to join!</span>
                        }
                    </div>
                    <div class="room-footer">
                        <span style="font-size:12px;color:#666">
                            @if (room.ScheduledStartTime.HasValue)
                            {
                                <text>Starts @room.ScheduledStartTime.Value.ToLocalTime().ToString("MMM dd, h:mm tt")</text>
                            }
                            else if (room.Status == "Active")
                            {
                                <text>🟢 Active now</text>
                            }
                            else
                            {
                                <text>@room.Status</text>
                            }
                        </span>
                        @if (room.Status == "Ended")
                        {
                            <button class="btn" type="button" disabled>Ended</button>
                        }
                        else if (room.CurrentParticipantCount >= room.MaxParticipants)
                        {
                            <button class="btn" type="button" disabled>Full</button>
                        }
                        else if (room.Privacy == "PrivateInviteOnly")
                        {
                            <button class="btn" type="button" @onclick="() => ShowRoomCodeModal(room.RoomId)">🔒 Enter Code</button>
                        }
                        else
                        {
                            <button class="btn" type="button" @onclick="() => JoinRoom(room.RoomId, null)">Join Room</button>
                        }
                    </div>
                </article>
            }

            <!-- Create Room (CTA) -->
            <article class="room cta-card">
                <div>
                    <h3 style="text-align:center;margin:0 0 6px">Start a New Room</h3>
                    <p class="desc" style="text-align:center;margin:0 0 14px">Create a study room for your module and invite classmates</p>
                    <button class="btn btn--ghost" type="button" id="openCreate">Create Room</button>
                </div>
            </article>
        </div>
    </div>

    <!-- ================== CREATE ROOM MODAL ================== -->
    <div class="modal" id="createModal" aria-hidden="true">
        <div class="modal__card" role="dialog" aria-modal="true" aria-labelledby="createTitle">
            <div class="modal__head">
                <span id="createTitle">Schedule a Room</span>
                <button class="btn-plain" id="closeCreate">✕</button>
            </div>
            <div class="modal__body">
                <div class="field" style="margin-bottom:10px">
                    <label for="roomName">Room name</label>
                    <input id="roomName" type="text" @bind="newRoom.RoomName" placeholder="e.g., Advanced Calculus – Integration Q&A">
                </div>

                <div class="modal__grid" style="margin-bottom:10px">
                    <div class="field">
                        <label for="roomType">Room Type</label>
                        <select id="roomType" @bind="newRoom.RoomType">
                            <option value="Standalone">Standalone</option>
                            <option value="StudentSession">Student Session</option>
                            <option value="TutorSession">Tutor Session</option>
                        </select>
                    </div>
                    <div class="field">
                        <label for="privacy">Privacy</label>
                        <select id="privacy" @bind="newRoom.Privacy">
                            <option value="Public">Public (Everyone can join)</option>
                            <option value="ModuleSpecific">Module Members Only</option>
                            <option value="PrivateInviteOnly">Private (Invite Only)</option>
                        </select>
                    </div>
                </div>

                <div class="modal__grid" style="margin-bottom:10px">
                    <div class="field">
                        <label for="roomDate">Start Date (Optional)</label>
                        <input id="roomDate" type="datetime-local" @bind="scheduledStart">
                    </div>
                    <div class="field">
                        <label for="duration">Duration (minutes)</label>
                        <input id="duration" type="number" @bind="duration" min="15" max="180" step="15">
                    </div>
                </div>

                <div class="modal__grid" style="margin-bottom:10px">
                    <div class="field">
                        <label for="maxSeats">Max participants</label>
                        <select id="maxSeats" @bind="newRoom.MaxParticipants">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="20">20</option>
                        </select>
                    </div>
                    <div class="field">
                        <label>Enable chat</label>
                        <label class="switch"><input type="checkbox" @bind="newRoom.EnableChat"><span class="slider"></span></label>
                    </div>
                </div>

                <div class="field" style="margin-bottom:10px">
                    <label for="notes">Description / agenda</label>
                    <textarea id="notes" @bind="newRoom.Description" placeholder="What will you cover? Topics, links, etc."></textarea>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div style="padding:10px;background:#fee;color:#c00;border-radius:8px;margin-top:10px">
                        @errorMessage
                    </div>
                }
            </div>
            <div class="modal__foot">
                <button class="btn-plain" id="cancelCreate" @onclick="CloseModal" disabled="@isCreating">Cancel</button>
                <button class="btn-primary" id="createBtn" @onclick="CreateRoom" disabled="@isCreating">
                    @if (isCreating)
                    {
                        <text>Creating...</text>
                    }
                    else
                    {
                        <text>Create</text>
                    }
                </button>
            </div>
        </div>
    </div>

    <!-- ================== ROOM CODE MODAL ================== -->
    <div class="modal" id="roomCodeModal" style="@(showRoomCodeModal ? "display:flex" : "display:none")">
        <div class="modal__card" role="dialog" aria-modal="true">
            <div class="modal__head">
                <span>Enter Room Code</span>
                <button class="btn-plain" @onclick="CloseRoomCodeModal">✕</button>
            </div>
            <div class="modal__body">
                <div class="field">
                    <label for="roomCode">Room Code</label>
                    <input id="roomCode" type="text" @bind="roomCode" placeholder="Enter 6-digit code" style="text-transform:uppercase">
                </div>
                @if (!string.IsNullOrEmpty(roomCodeError))
                {
                    <div style="padding:10px;background:#fee;color:#c00;border-radius:8px;margin-top:10px">
                        @roomCodeError
                    </div>
                }
            </div>
            <div class="modal__foot">
                <button class="btn-plain" @onclick="CloseRoomCodeModal">Cancel</button>
                <button class="btn-primary" @onclick="JoinPrivateRoom">Join</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<StudyRoomDto> rooms = new();
    private bool isLoading = true;
    private bool isCreating = false;
    private string errorMessage = "";

    private CreateStudyRoomRequest newRoom = new()
        {
            RoomType = "Standalone",
            Privacy = "Public",
            MaxParticipants = 10,
            EnableChat = true
        };

    private DateTime? scheduledStart;
    private int duration = 60;

    // Room code modal
    private bool showRoomCodeModal = false;
    private Guid selectedRoomId;
    private string roomCode = "";
    private string roomCodeError = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
    }

    private async Task LoadRooms()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetFromJsonAsync<List<StudyRoomDto>>("api/studyroom");
            if (response != null)
            {
                rooms = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading rooms: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateRoom()
    {
        try
        {
            errorMessage = "";

            if (string.IsNullOrWhiteSpace(newRoom.RoomName))
            {
                errorMessage = "Room name is required";
                return;
            }

            isCreating = true;

            // Set scheduled times if provided
            if (scheduledStart.HasValue)
            {
                newRoom.ScheduledStartTime = scheduledStart.Value;
                newRoom.ScheduledEndTime = scheduledStart.Value.AddMinutes(duration);
            }

            var response = await Http.PostAsJsonAsync("api/studyroom", newRoom);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateStudyRoomResponse>();

                if (result?.Success == true && result.Room != null)
                {
                    await CloseModal();
                    // Navigate to the created room
                    Nav.NavigateTo($"/calendar/session/{result.Room.RoomId}");
                }
                else
                {
                    errorMessage = result?.Message ?? "Failed to create room";
                }
            }
            else
            {
                errorMessage = "Failed to create room. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error creating room: {ex.Message}");
        }
        finally
        {
            isCreating = false;
        }
    }

    private void JoinRoom(Guid roomId, string? code)
    {
        // Navigate to the room session page
        Nav.NavigateTo($"/calendar/session/{roomId}");
    }

    private void ShowRoomCodeModal(Guid roomId)
    {
        selectedRoomId = roomId;
        roomCode = "";
        roomCodeError = "";
        showRoomCodeModal = true;
        StateHasChanged();
    }

    private void CloseRoomCodeModal()
    {
        showRoomCodeModal = false;
        roomCode = "";
        roomCodeError = "";
        StateHasChanged();
    }

    private async Task JoinPrivateRoom()
    {
        try
        {
            roomCodeError = "";

            if (string.IsNullOrWhiteSpace(roomCode))
            {
                roomCodeError = "Please enter the room code";
                return;
            }

            // Check if the code is valid by calling the API
            var canJoinResponse = await Http.PostAsJsonAsync($"api/studyroom/{selectedRoomId}/can-join",
                new { RoomCode = roomCode.ToUpper() });

            if (canJoinResponse.IsSuccessStatusCode)
            {
                var result = await canJoinResponse.Content.ReadFromJsonAsync<CanJoinRoomResponse>();

                if (result?.CanJoin == true)
                {
                    CloseRoomCodeModal();
                    JoinRoom(selectedRoomId, roomCode.ToUpper());
                }
                else
                {
                    roomCodeError = result?.Message ?? "Invalid room code";
                }
            }
            else
            {
                roomCodeError = "Unable to verify room code";
            }
        }
        catch (Exception ex)
        {
            roomCodeError = $"Error: {ex.Message}";
            Console.WriteLine($"Error joining private room: {ex.Message}");
        }
    }

    // Response DTO for can join check
    private class CanJoinRoomResponse
    {
        public bool CanJoin { get; set; }
        public string? Message { get; set; }
    }

    private async Task CloseModal()
    {
        await JS.InvokeVoidAsync("eval", "document.getElementById('createModal').classList.remove('show')");

        // Reset form
        newRoom = new()
            {
                RoomType = "Standalone",
                Privacy = "Public",
                MaxParticipants = 10,
                EnableChat = true
            };
        scheduledStart = null;
        duration = 60;
        errorMessage = "";
    }
}

<script>
    (function initTheme() {
        try { const saved = localStorage.getItem('theme'); if (saved === 'dark') { document.documentElement.classList.add('theme-dark'); } } catch (_) { }
    })();
    function toggleTheme() {
        const el = document.documentElement; const isDark = el.classList.toggle('theme-dark');
        try { localStorage.setItem('theme', isDark ? 'dark' : 'light'); } catch (_) { }
    }

    (function wireNav() {
        const nav = document.getElementById('mainNav'); if (!nav) return;
        nav.addEventListener('click', (e) => {
            const a = e.target.closest('a'); if (!a) return;
            const href = (a.getAttribute('href') || '').trim();
            [...nav.querySelectorAll('a')].forEach(x => x.classList.remove('db-nav__link--active'));
            a.classList.add('db-nav__link--active');
            if (href === '' || href === '#') { e.preventDefault(); }
        }, { passive: false });
    })();

    (function wireActions() {
        const root = document.getElementById('page-rooms');
        const sw = root?.querySelector('#searchWrap'), sb = root?.querySelector('#btnSearch'), si = root?.querySelector('#searchInput');
        const bn = root?.querySelector('#btnNotif'), pn = root?.querySelector('#popNotif');
        const bp = root?.querySelector('#btnProfile'), pp = root?.querySelector('#popProfile');
        function closeAll() { sw?.classList.remove('open'); pn?.classList.remove('show'); bn?.setAttribute('aria-expanded', 'false'); pp?.classList.remove('show'); bp?.setAttribute('aria-expanded', 'false'); }
        sb?.addEventListener('click', (e) => { e.preventDefault(); const o = sw.classList.toggle('open'); if (o) { si?.focus(); } pn?.classList.remove('show'); pp?.classList.remove('show'); });
        bn?.addEventListener('click', (e) => { e.preventDefault(); const s = pn.classList.toggle('show'); bn.setAttribute('aria-expanded', s ? 'true' : 'false'); pp?.classList.remove('show'); sw?.classList.remove('open'); });
        bp?.addEventListener('click', (e) => { e.preventDefault(); const s = pp.classList.toggle('show'); bp.setAttribute('aria-expanded', s ? 'true' : 'false'); pn?.classList.remove('show'); sw?.classList.remove('open'); });
        document.addEventListener('click', (e) => { const within = e.target.closest('#actionsBar') || e.target.closest('.db-topbar__left'); if (!(within)) closeAll(); });
    })();

    (function wireCreateModal() {
        const root = document.getElementById('page-rooms');
        const modal = root?.querySelector('#createModal');
        const openBtn = root?.querySelector('#openCreate');
        const closeBtn = root?.querySelector('#closeCreate');

        function open() { modal?.classList.add('show'); setTimeout(() => root?.querySelector('#roomName')?.focus(), 0); }
        function close() { modal?.classList.remove('show'); }

        openBtn?.addEventListener('click', open);
        closeBtn?.addEventListener('click', close);
        modal?.addEventListener('click', e => { if (e.target === modal) close(); });
        document.addEventListener('keydown', e => { if (e.key === 'Escape') close(); });
    })();
</script>

<!-- Button safety so other pages can't flatten these controls -->
<style>
    #page-rooms .btn,
    #page-rooms .btn-plain,
    #page-rooms .btn-primary,
    #page-rooms .btn--ghost,
    #page-rooms .db-toggle,
    #page-rooms .db-iconbtn {
        display: inline-flex !important;
        align-items: center !important;
        justify-content: center !important;
        border-width: 1px !important;
        border-style: solid !important;
        border-radius: 12px !important;
        font-weight: 800 !important;
        text-decoration: none !important;
        cursor: pointer !important;
    }

    #page-rooms .btn {
        padding: 10px 18px !important;
        background: #1d4ed8 !important;
        color: #fff !important;
        border-color: var(--db-border, #e5e7eb) !important;
    }

    #page-rooms .btn--ghost {
        background: #fff !important;
        color: #1f2937 !important;
    }

    #page-rooms .btn-plain {
        padding: 8px 12px !important;
        background: #fff !important;
        color: inherit !important;
        border-color: var(--db-border, #e5e7eb) !important;
    }

    #page-rooms .btn-primary {
        padding: 8px 14px !important;
        background: #2563eb !important;
        color: #fff !important;
        border-color: var(--db-border, #e5e7eb) !important;
    }

    .badge {
        padding: 3px 8px;
        border-radius: 6px;
        font-size: 11px;
        font-weight: 700;
        text-transform: uppercase;
    }

    .badge-blue {
        background: #dbeafe;
        color: #1e40af;
    }

    .badge-green {
        background: #d1fae5;
        color: #065f46;
    }

    .badge-gray {
        background: #f3f4f6;
        color: #374151;
    }
</style>
