@page "/tutor/booking-requests"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject HttpClient Http
@using Tutorly.Shared
@using System.Text.Json
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Booking Requests | Tutorly</PageTitle>

<div id="page-tutor-booking-requests" class="br-root">
    <!-- ================== NAVBAR ================== -->
    <header class="db-topbar">
        <div class="db-topbar__inner">
            <div class="db-topbar__left">
                <button class="db-toggle" title="Toggle theme" aria-label="Toggle theme" onclick="brToggleTheme()">
                    <svg class="icon-sun" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="4"></circle>
                        <path d="M12 2v2M12 20v2M2 12h2M20 12h2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" />
                    </svg>
                    <svg class="icon-moon" viewBox="0 0 24 24" fill="currentColor"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" /></svg>
                </button>
                <a class="db-brand" href="/tutor/dashboard">
                    <span class="db-brand__logo"><svg class="db-logo" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" /></svg></span>
                    <span class="db-brand__text">Tutorly</span>
                </a>
            </div>

            <nav class="db-nav" id="brMainNav">
                <a class="db-nav__link" href="/tutor/dashboard">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 10.5 12 4l9 6.5V21a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1z" /></svg>
                    <span>Home</span>
                </a>
                <a class="db-nav__link" href="/tutor/availability">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 2v4M16 2v4M3 10h18M5 22h14a2 2 0 0 0 2-2V8H3v12a2 2 0 0 0 2 2z" /></svg>
                    <span>Availability</span>
                </a>
                <a class="db-nav__link" href="/tutor/queue">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 6h16M4 12h12M4 18h8" /></svg>
                    <span>Calendar</span>
                </a>
                <a class="db-nav__link db-nav__link--active" href="/tutor/booking-requests" aria-current="page">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a4 4 0 0 1-4 4H8l-5 3V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z" /></svg>
                    <span>Requests</span>
                </a>
                <a class="db-nav__link" href="/tutor/resources">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 4h16v16H4zM8 4v16" /></svg>
                    <span>Resources</span>
                </a>
                <a class="db-nav__link" href="/tutor/messages">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a4 4 0 0 1-4 4H9l-4 3v-6H5a4 4 0 0 1-4-4V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z" /></svg>
                    <span>Messages</span>
                </a>
                <a class="db-nav__link" href="/tutor/analytics">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 3v18h18" /><path d="M7 13l3 3 7-7" /></svg>
                    <span>Analytics</span>
                </a>
                <a class="db-nav__link" href="/tutorforum">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <!-- main bubble -->
                        <path d="M21 12a4 4 0 0 1-4 4H9l-4 3V8a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v4z" />
                        <!-- secondary bubble -->
                        <path d="M7 14H6a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h2" />
                    </svg>
                    <span>Forum</span>
                </a>
                <a class="db-nav__link" href="/tutor/tutorsessiondetails">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 6v12M6 12h12" /></svg><span>Sessions</span>
                </a>
            </nav>

            <div class="db-actions" id="brActionsBar">
                <div class="search-wrap" id="brSearchWrap">
                    <button class="db-iconbtn" aria-label="Search" id="brBtnSearch">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z" /></svg>
                    </button>
                    <input id="brSearchInput" type="text" placeholder="Search…">
                </div>
                <button class="db-avatar"><img src="https://i.pravatar.cc/40?img=4" alt="Me"></button>
            </div>
        </div>
    </header>

    <!-- ================== MAIN CONTENT ================== -->
    <div class="wrap">
        <section class="panel">
            <div class="panel__head br-head">
                <div>
                    <div class="br-title">Booking Requests</div>
                    <div class="br-sub">Review and respond to student booking requests</div>
                </div>
                <div class="br-toolbar">
                    <button class="btn btn--primary" @onclick="RefreshRequests">
                        <svg class="btn__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
                            <path d="M21 3v5h-5" />
                            <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
                            <path d="M3 21v-5h5" />
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="br-loading">
                    <div class="spinner"></div>
                    <p>Loading booking requests...</p>
                </div>
            }
            else if (bookingRequests.Count == 0)
            {
                <div class="br-empty">
                    <svg class="br-empty__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 15a4 4 0 0 1-4 4H8l-5 3V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z" />
                    </svg>
                    <h3>No pending requests</h3>
                    <p>You have no pending booking requests at the moment.</p>
                </div>
            }
            else
            {
                <div class="br-list">
                    @foreach (var request in bookingRequests)
                    {
                        <div class="br-card">
                            <div class="br-card__header">
                                <div class="br-card__info">
                                    <h4 class="br-card__title">@GetStudentName(request)</h4>
                                    <p class="br-card__subtitle">Module: @GetModuleName(request)</p>
                                    <p class="br-card__date">Requested: @request.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</p>
                                </div>
                                <div class="br-card__status">
                                    <span class="status-badge status-badge--pending">@request.Status</span>
                                </div>
                            </div>
                            
                            <div class="br-card__body">
                                <div class="br-card__slots">
                                    <h5>Requested Time Slots:</h5>
                                    <div class="slot-list">
                                        @foreach (var slot in request.RequestedSlots ?? new List<DateTime>())
                                        {
                                            <div class="slot-item">
                                                <svg class="slot-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                    <circle cx="12" cy="12" r="10" />
                                                    <polyline points="12,6 12,12 16,14" />
                                                </svg>
                                                <span>@slot.ToString("MMM dd, yyyy 'at' HH:mm")</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(request.StudentPreferencesJson))
                                {
                                    <div class="br-card__preferences">
                                        <h5>Student Preferences:</h5>
                                        @{
                                            var preferences = ParseStudentPreferences(request.StudentPreferencesJson);
                                        }
                                        <div class="preferences-list">
                                            @if (preferences.PreferredDays?.Any() == true)
                                            {
                                                <div class="preference-item">
                                                    <strong>Preferred Days:</strong>
                                                    @string.Join(", ", preferences.PreferredDays.Select(d => GetDayName(d)))
                                                </div>
                                            }
                                            @if (preferences.PreferredTimes?.Any() == true)
                                            {
                                                <div class="preference-item">
                                                    <strong>Preferred Times:</strong>
                                                    @string.Join(", ", preferences.PreferredTimes)
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <div class="br-card__actions">
                                <button class="btn btn--success" @onclick="() => ApproveRequest(request.RequestId ?? Guid.Empty)">
                                    <svg class="btn__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="20,6 9,17 4,12" />
                                    </svg>
                                    Approve
                                </button>
                                <button class="btn btn--danger" @onclick="() => RejectRequest(request.RequestId ?? Guid.Empty)">
                                    <svg class="btn__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <line x1="18" y1="6" x2="6" y2="18" />
                                        <line x1="6" y1="6" x2="18" y2="18" />
                                    </svg>
                                    Reject
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </section>
    </div>
</div>

<style>
    .br-root {
        min-height: 100vh;
        background: var(--bg);
        color: var(--text);
    }

    .br-head {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid var(--border);
    }

    .br-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
    }

    .br-sub {
        color: var(--text-muted);
        margin: 0.25rem 0 0 0;
    }

    .br-toolbar {
        display: flex;
        gap: 0.75rem;
    }

    .br-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        text-align: center;
    }

    .spinner {
        width: 2rem;
        height: 2rem;
        border: 2px solid var(--border);
        border-top: 2px solid var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .br-empty {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        text-align: center;
    }

    .br-empty__icon {
        width: 4rem;
        height: 4rem;
        color: var(--text-muted);
        margin-bottom: 1rem;
    }

    .br-list {
        padding: 1.5rem;
    }

    .br-card {
        background: var(--card-bg);
        border: 1px solid var(--border);
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        overflow: hidden;
    }

    .br-card__header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 1.5rem;
        border-bottom: 1px solid var(--border);
    }

    .br-card__title {
        font-size: 1.125rem;
        font-weight: 600;
        margin: 0 0 0.25rem 0;
    }

    .br-card__subtitle {
        color: var(--text-muted);
        margin: 0 0 0.25rem 0;
    }

    .br-card__date {
        color: var(--text-muted);
        font-size: 0.875rem;
        margin: 0;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-badge--pending {
        background: #fef3c7;
        color: #92400e;
    }

    .br-card__body {
        padding: 1.5rem;
    }

    .br-card__slots h5,
    .br-card__preferences h5 {
        font-size: 0.875rem;
        font-weight: 600;
        margin: 0 0 0.75rem 0;
        color: var(--text-muted);
    }

    .slot-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .slot-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        background: var(--bg-soft);
        border-radius: 0.25rem;
    }

    .slot-icon {
        width: 1rem;
        height: 1rem;
        color: var(--primary);
    }

    .br-card__preferences {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid var(--border);
    }

    .br-card__preferences p {
        margin: 0;
        font-size: 0.875rem;
        color: var(--text-muted);
    }

    .br-card__actions {
        display: flex;
        gap: 0.75rem;
        padding: 1.5rem;
        background: var(--bg-soft);
        border-top: 1px solid var(--border);
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn--primary {
        background: var(--primary);
        color: white;
    }

    .btn--success {
        background: #10b981;
        color: white;
    }

    .btn--danger {
        background: #ef4444;
        color: white;
    }

    .btn:hover {
        opacity: 0.9;
        transform: translateY(-1px);
    }

    .btn__icon {
        width: 1rem;
        height: 1rem;
    }

    .preferences-list {
        margin-top: 0.5rem;
    }

    .preference-item {
        margin-bottom: 0.5rem;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .preference-item strong {
        color: #495057;
        margin-right: 0.5rem;
    }

    .slot-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .slot-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        background: #e3f2fd;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .slot-icon {
        width: 1rem;
        height: 1rem;
        color: #1976d2;
    }
</style>

<script>
    // Theme toggle
    function brToggleTheme() {
        document.documentElement.classList.toggle('theme-dark');
        localStorage.setItem('theme', document.documentElement.classList.contains('theme-dark') ? 'dark' : 'light');
    }

    // Initialize theme
    if (localStorage.getItem('theme') === 'dark') {
        document.documentElement.classList.add('theme-dark');
    }
</script>

@code {
    private List<BookingRequestDto> bookingRequests = new();
    private int currentTutorId = 1; // Will be set from auth context
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get user profile to extract tutor ID
            var profile = await Http.GetFromJsonAsync<UnifiedSessionDto>("/api/profile/me");
            if (profile?.Profile?.TutorId != null)
            {
                currentTutorId = profile.Profile.TutorId.Value;
            }
            
            await LoadBookingRequests();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tutor profile: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadBookingRequests()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<BookingRequestDto>>($"/api/booking/pending-requests/{currentTutorId}");
            if (response != null)
            {
                bookingRequests = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading booking requests: {ex.Message}");
        }
    }

    private async Task RefreshRequests()
    {
        isLoading = true;
        StateHasChanged();
        
        await LoadBookingRequests();
        
        isLoading = false;
        StateHasChanged();
    }

    private async Task ApproveRequest(Guid requestId)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"/api/booking/confirm/{requestId}", new { });
            
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Booking request approved successfully!");
                await LoadBookingRequests();
                
                // Trigger calendar refresh on other pages
                Console.WriteLine("DEBUG: BookingRequests - Triggering calendar refresh");
                await JS.InvokeVoidAsync("triggerCalendarRefresh");
                Console.WriteLine("DEBUG: BookingRequests - Calendar refresh triggered");
                
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to approve booking request. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error approving request: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while approving the request.");
        }
    }

    private async Task RejectRequest(Guid requestId)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"/api/booking/reject/{requestId}", new { });
            
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Booking request rejected.");
                await LoadBookingRequests();
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to reject booking request. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rejecting request: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while rejecting the request.");
        }
    }

    private StudentAvailabilityDto ParseStudentPreferences(string json)
    {
        try
        {
            if (string.IsNullOrEmpty(json))
                return new StudentAvailabilityDto();
            
            Console.WriteLine($"DEBUG: Parsing student preferences JSON: {json}");
            
            // Clean the JSON string more thoroughly
            var cleanedJson = json.Trim()
                .Replace("\\u0022", "\"")
                .Replace("\\\"", "\"")
                .Replace("\r", "")
                .Replace("\n", "")
                .Replace("\t", "");
            
            Console.WriteLine($"DEBUG: Cleaned JSON: {cleanedJson}");
            
            // Try to parse as JsonElement first to validate structure
            using var document = System.Text.Json.JsonDocument.Parse(cleanedJson);
            var root = document.RootElement;
            
            Console.WriteLine($"DEBUG: JSON structure validated successfully");
            Console.WriteLine($"DEBUG: Root element type: {root.ValueKind}");
            
            if (root.TryGetProperty("PreferredDays", out var preferredDays))
            {
                Console.WriteLine($"DEBUG: PreferredDays found: {preferredDays}");
                Console.WriteLine($"DEBUG: PreferredDays type: {preferredDays.ValueKind}");
                if (preferredDays.ValueKind == System.Text.Json.JsonValueKind.Array)
                {
                    Console.WriteLine($"DEBUG: PreferredDays array length: {preferredDays.GetArrayLength()}");
                }
            }
            else
            {
                Console.WriteLine($"DEBUG: PreferredDays property not found");
            }
            
            if (root.TryGetProperty("PreferredTimes", out var preferredTimes))
            {
                Console.WriteLine($"DEBUG: PreferredTimes found: {preferredTimes}");
                Console.WriteLine($"DEBUG: PreferredTimes type: {preferredTimes.ValueKind}");
                if (preferredTimes.ValueKind == System.Text.Json.JsonValueKind.Array)
                {
                    Console.WriteLine($"DEBUG: PreferredTimes array length: {preferredTimes.GetArrayLength()}");
                }
            }
            else
            {
                Console.WriteLine($"DEBUG: PreferredTimes property not found");
            }
            
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                AllowTrailingCommas = true,
                ReadCommentHandling = JsonCommentHandling.Skip
            };
            
            return System.Text.Json.JsonSerializer.Deserialize<StudentAvailabilityDto>(cleanedJson, options) ?? new StudentAvailabilityDto();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing student preferences: {ex.Message}");
            Console.WriteLine($"JSON content: {json}");
            
            // Enhanced fallback parsing
            try
            {
                var fallback = new StudentAvailabilityDto();
                
                // Extract times
                if (json.Contains("Morning"))
                    fallback.PreferredTimes.Add("Morning");
                if (json.Contains("Afternoon"))
                    fallback.PreferredTimes.Add("Afternoon");
                if (json.Contains("Evening"))
                    fallback.PreferredTimes.Add("Evening");
                
                // Extract days more robustly
                var dayMatches = System.Text.RegularExpressions.Regex.Matches(json, @"\[(\d+)(?:,\d+)*\]");
                foreach (System.Text.RegularExpressions.Match match in dayMatches)
                {
                    if (match.Groups.Count > 1)
                    {
                        var dayStr = match.Groups[1].Value;
                        if (int.TryParse(dayStr, out int day) && day >= 0 && day <= 6)
                        {
                            fallback.PreferredDays.Add(day);
                        }
                    }
                }
                
                // Also try simple pattern matching
                for (int i = 0; i <= 6; i++)
                {
                    if (json.Contains($"[{i},") || json.Contains($",{i},") || json.Contains($",{i}]"))
                    {
                        if (!fallback.PreferredDays.Contains(i))
                            fallback.PreferredDays.Add(i);
                    }
                }
                
                Console.WriteLine($"DEBUG: Fallback parsing result - Days: [{string.Join(",", fallback.PreferredDays)}], Times: [{string.Join(",", fallback.PreferredTimes)}]");
                return fallback;
            }
            catch
            {
                return new StudentAvailabilityDto();
            }
        }
    }

    private string GetDayName(int dayOfWeek)
    {
        return dayOfWeek switch
        {
            0 => "Sunday",
            1 => "Monday", 
            2 => "Tuesday",
            3 => "Wednesday",
            4 => "Thursday",
            5 => "Friday",
            6 => "Saturday",
            _ => "Unknown"
        };
    }

    private string GetStudentName(BookingRequestDto request)
    {
        try
        {
            // Use reflection to safely access the property
            var property = typeof(BookingRequestDto).GetProperty("StudentName");
            if (property != null)
            {
                var value = property.GetValue(request) as string;
                return !string.IsNullOrEmpty(value) ? value : "Unknown Student";
            }
        }
        catch
        {
            // Fallback if reflection fails
        }
        return "Unknown Student";
    }

    private string GetModuleName(BookingRequestDto request)
    {
        try
        {
            // Use reflection to safely access the property
            var property = typeof(BookingRequestDto).GetProperty("ModuleName");
            if (property != null)
            {
                var value = property.GetValue(request) as string;
                return !string.IsNullOrEmpty(value) ? value : "Unknown Module";
            }
        }
        catch
        {
            // Fallback if reflection fails
        }
        return "Unknown Module";
    }
}

<script>
    // Function to trigger calendar refresh on other pages
    window.triggerCalendarRefresh = function() {
        console.log("DEBUG: triggerCalendarRefresh called - dispatching calendarRefresh event");
        // Dispatch a custom event that calendar pages can listen to
        window.dispatchEvent(new CustomEvent('calendarRefresh'));
        console.log("DEBUG: calendarRefresh event dispatched");
    };
</script>