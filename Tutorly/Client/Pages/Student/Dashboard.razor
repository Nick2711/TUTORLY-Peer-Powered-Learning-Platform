@page "/dashboard"

<PageTitle>Dashboard | Tutorly</PageTitle>

<div id="page-dashboard" class="dashboard-page">
    <!-- ================== NAVBAR ================== -->
    <header class="db-topbar">
        <div class="db-topbar__inner">
            <div class="db-topbar__left">
                <button id="themeToggle" class="db-toggle" title="Toggle theme" aria-label="Toggle theme" onclick="toggleTheme()">
                    <svg class="icon-sun" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="4"></circle>
                        <path d="M12 2v2M12 20v2M2 12h2M20 12h2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"></path>
                    </svg>
                    <svg class="icon-moon" viewBox="0 0 24 24" fill="currentColor"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" /></svg>
                </button>

                <a class="db-brand" href="/dashboard">
                    <span class="db-brand__logo"><svg class="db-logo" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" /></svg></span>
                    <span class="db-brand__text">Tutorly</span>
                </a>
            </div>

            <nav class="db-nav" id="mainNav">
                <a class="db-nav__link db-nav__link--active" href="/dashboard" data-tab="home">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 9.5 12 3l9 6.5V21a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1z" /></svg>
                    <span>Home</span>
                </a>
                <a class="db-nav__link" href="/modules" data-tab="modules">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 3h8v8H3zM13 3h8v8h-8zM3 13h8v8H3zM13 13h8v8h-8z" /></svg>
                    <span>Modules</span>
                </a>
                <a class="db-nav__link" href="/messages" data-tab="messages">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a4 4 0 0 1-4 4H9l-4 3v-6H5a4 4 0 0 1-4-4V7a4 4 0 0 1 4-4h12a4 4 0 0 1 4 4z" /></svg>
                    <span>Messages</span>
                </a>
                <a class="db-nav__link" href="/forum" data-tab="forum">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a4 4 0 0 1-4 4H8l-5 3V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z" /></svg>
                    <span>Forum</span>
                </a>
                <a class="db-nav__link" href="/calendar/overview" data-tab="meetings">
                    <svg class="db-nav__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 2v4M16 2v4M3 10h18M5 22h14a2 2 0 0 0 2-2V8H3v12a2 2 0 0 0 2 2z" /></svg>
                    <span>Meetings</span>
                </a>
            </nav>

            <div class="db-actions" id="actionsBar">
                <div class="search-wrap" id="searchWrap">
                    <button class="db-iconbtn" aria-label="Search" id="btnSearch">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z" /></svg>
                    </button>
                    <input id="searchInput" type="text" placeholder="Search…">
                </div>

                <div style="position:relative">
                    <button class="db-iconbtn" aria-haspopup="true" aria-expanded="false" id="btnNotif">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M15 18H6l1-1v-5a5 5 0 0 1 10 0v5l1 1h-3Zm-6 0a3 3 0 0 0 6 0" /></svg>
                    </button>
                    <div class="pop" id="popNotif" role="menu" aria-label="Notifications">
                        <div class="pop__head">Notifications</div>
                        <ul class="pop__list">
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">🎓</div><div><div class="pop__title">New badge unlocked</div><div class="pop__text">You earned “Active Learner”.</div></div></div></li>
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">💬</div><div><div class="pop__title">Reply from Anouk</div><div class="pop__text">She commented on your code review thread.</div></div></div></li>
                            <li class="pop__item"><div class="pop__row"><div class="pop__icon">📅</div><div><div class="pop__title">Session reminder</div><div class="pop__text">Query Review starts tomorrow at 1:00 PM.</div></div></div></li>
                        </ul>
                    </div>
                </div>

                <div style="position:relative">
                    <button class="db-avatar" aria-haspopup="true" aria-expanded="false" id="btnProfile">
                        <img id="avatarImg" src="https://i.pravatar.cc/40?img=3" alt="Profile" />
                    </button>
                    <div class="pop" id="popProfile" role="menu" aria-label="Profile menu" style="width:280px">
                        <div class="pop__head">My Profile</div>
                        <ul class="pop__list">
                            <li class="pop__item clickable" data-target="#modalPhoto">
                                <div class="pop__row"><div class="pop__icon">🖼️</div><div><div class="pop__title">Change Photo</div><div class="pop__text">Upload a new profile picture.</div></div></div>
                            </li>
                            <li class="pop__item clickable" data-target="#modalSettings">
                                <div class="pop__row"><div class="pop__icon">⚙️</div><div><div class="pop__title">Settings</div><div class="pop__text">Manage account and preferences.</div></div></div>
                            </li>
                            <li class="pop__item clickable" data-target="#modalBadges">
                                <div class="pop__row"><div class="pop__icon">🏆</div><div><div class="pop__title">Achievements</div><div class="pop__text">See all earned badges.</div></div></div>
                            </li>
                            <!-- NEW: Logout -->
                            <li class="pop__item clickable" data-action="logout">
                                <div class="pop__row">
                                    <div class="pop__icon">🚪</div>
                                    <div>
                                        <div class="pop__title">Logout</div>
                                        <div class="pop__text">Sign out of your account.</div>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- ================== HERO ================== -->
    <section class="db-hero" aria-hidden="false">
        <div class="db-hero__inner">
            <h1 class="db-hero__title">Academic Support, Simplified</h1>
            <p class="db-hero__subtitle">Get instant help from AI and Tutors, collaborate in study rooms, and track your progress — all in one place.</p>
            <div class="db-hero__actions">
                <a href="/forum" class="db-btn db-btn--light" id="btnAsk">Ask a Question</a>
                <a href="/modules" class="db-btn db-btn--accent" id="btnTutor">Find a Tutor</a>
            </div>
        </div>
    </section>

    <!-- ================== QUICK ACTIONS ================== -->
    <section class="db-quick">
        <article class="db-card db-card--quick">
            <h3 class="db-card__title">AI Assistant</h3>
            <p class="db-card__desc">Get instant answers to your questions</p>
            <a href="/chatbotpage" class="db-card__link">Try now ›</a>
        </article>

        <article class="db-card db-card--quick">
            <h3 class="db-card__title">Book Session</h3>
            <p class="db-card__desc">Schedule 1:1 time with a tutor</p>
            <a href="/calendar/overview" class="db-card__link">View Calendar ›</a>
        </article>

        <article class="db-card db-card--quick">
            <h3 class="db-card__title">Study Rooms</h3>
            <p class="db-card__desc">Collaborate with classmates</p>
            <a href="#" class="db-card__link">Join now ›</a>
        </article>

        <article class="db-card db-card--quick">
            <h3 class="db-card__title">Resources</h3>
            <p class="db-card__desc">Find study materials</p>
            <a href="#" class="db-card__link">Browse ›</a>
        </article>
    </section>

    <!-- ================== MAIN ================== -->
    <div class="db-main">
        <div class="db-col db-col--left">
            <!-- Active Chats -->
            <section class="db-card">
                <div class="db-card__head"><h3 class="db-card__title">Active Chats</h3></div>
                @if (IsLoadingChats)
                {
                    <div class="db-loading">Loading recent chats...</div>
                }
                else if (!RecentChats.Any())
                {
                    <div class="db-empty">
                        <p>No recent conversations yet.</p>
                        <a href="/messages" class="db-btn db-btn--accent">Start Chatting</a>
                    </div>
                }
                else
                {
                    <ul class="db-list">
                        @foreach (var chat in RecentChats)
                        {
                            <li class="db-list__row clickable chat-jump" data-chat="@chat.ConversationId" title="Open chat">
                                <div class="db-list__avatar">
                                    <img src="@GetOtherParticipantAvatar(chat)" alt="@GetOtherParticipantName(chat)" />
                                </div>
                                <div>
                                    <div class="db-list__name">@GetOtherParticipantName(chat)</div>
                                    <div class="db-list__text">
                                        @if (chat.LastMessage != null)
                                        {
                                            @(chat.LastMessage.Content.Length > 50 ? chat.LastMessage.Content.Substring(0, 50) + "..." : chat.LastMessage.Content)
                                        }
                                        else
                                        {
                                            <span class="text-muted">No messages yet</span>
                                        }
                                    </div>
                                </div>
                                <div class="db-list__meta">@GetTimeAgo(chat.LastMessageAt)</div>
                            </li>
                        }
                    </ul>
                }
                <div class="db-card__foot"><a href="/messages" class="db-card__link">View all chats</a></div>
            </section>

            <!-- Modules -->
            <section class="db-card">
                <div class="db-card__head"><h3 class="db-card__title">Your Modules</h3></div>
                @if (IsLoadingModules)
                {
                    <div class="db-loading">Loading your modules...</div>
                }
                else if (!MyModules.Any())
                {
                    <div class="db-empty">
                        <p>You're not enrolled in any modules yet.</p>
                        <a href="/modules" class="db-btn db-btn--accent">Browse Modules</a>
                    </div>
                }
                else
                {
                    <ul class="db-modules">
                        @foreach (var module in MyModules)
                        {
                            <li class="db-module" data-code="@module.ModuleCode">
                                <div class="db-module__icon db-module__icon--@GetModuleColor(module.ModuleCode)">@module.ModuleCode.FirstOrDefault()</div>
                                <div>
                                    <div class="db-module__name">@module.ModuleCode</div>
                                    <div class="db-module__desc">@module.ModuleName</div>
                                    @if (!string.IsNullOrEmpty(module.TutorName))
                                    {
                                        <div class="db-module__tutor">
                                            <img src="@module.TutorPhoto" alt="@module.TutorName" class="db-module__tutor-avatar" />
                                            <span>@module.TutorName</span>
                                            <span class="db-module__rating">@module.Stars</span>
                                        </div>
                                    }
                                </div>
                                <a href="/mymodules?code=@module.ModuleCode" class="db-chip module-link">View Module</a>
                            </li>
                        }
                    </ul>
                }
            </section>
        </div>

        <div class="db-col">
            <!-- Progress -->
            <section class="db-card">
                <div class="db-card__head"><h3 class="db-card__title">Your Progress</h3></div>
                <div class="db-progress">
                    <div class="db-progress__label"><span>Weekly Goal</span><span>75%</span></div>
                    <div class="db-progress__bar"><span class="db-progress__fill" style="width:75%"></span></div>
                    <div class="db-progress__mini">
                        <div class="mini"><span class="num">12</span><span class="lab">Questions</span></div>
                        <div class="mini"><span class="num">3</span><span class="lab">Sessions</span></div>
                        <div class="mini"><span class="num">8</span><span class="lab">Resources</span></div>
                    </div>
                </div>
            </section>

            <!-- Recent Trophies (renamed + trophy icons) -->
            <section class="db-card">
                <div class="db-card__head"><h3 class="db-card__title">Recent Trophies</h3></div>
                <div class="db-badges-lg">
                    <!-- Trophy 1 -->
                    <div class="db-badgeLg db-badgeLg--rose">
                        <div class="db-badgeLg__icon">
                            <svg class="db-badgeLg__trophy" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <!-- cup -->
                                <path d="M8 5h8v2a4 4 0 0 1-4 4 4 4 0 0 1-4-4V5Z" />
                                <!-- handles impact -->
                                <path d="M7 5H3a4 4 0 0 0 4 4M17 5h4a4 4 0 0 1-4 4" />
                                <!-- stem / base -->
                                <path d="M12 11v4M10 15h4M9 19h6" />
                            </svg>
                        </div>
                        <div class="db-badgeLg__label">First Thanks</div>
                    </div>

                    <!-- Trophy 2 -->
                    <div class="db-badgeLg db-badgeLg--lime">
                        <div class="db-badgeLg__icon">
                            <svg class="db-badgeLg__trophy" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M8 5h8v2a4 4 0 0 1-4 4 4 4 0 0 1-4-4V5Z" />
                                <path d="M7 5H3a4 4 0 0 0 4 4M17 5h4a4 4 0 0 1-4 4" />
                                <path d="M12 11v4M10 15h4M9 19h6" />
                            </svg>
                        </div>
                        <div class="db-badgeLg__label">Supporter</div>
                    </div>

                    <!-- Trophy 3 -->
                    <div class="db-badgeLg db-badgeLg--sky">
                        <div class="db-badgeLg__icon">
                            <svg class="db-badgeLg__trophy" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M8 5h8v2a4 4 0 0 1-4 4 4 4 0 0 1-4-4V5Z" />
                                <path d="M7 5H3a4 4 0 0 0 4 4M17 5h4a4 4 0 0 1-4 4" />
                                <path d="M12 11v4M10 15h4M9 19h6" />
                            </svg>
                        </div>
                        <div class="db-badgeLg__label">Helpful Voice</div>
                    </div>
                </div>
                <a href="/gamification" class="db-btn-ghost">View all trophies</a>
            </section>

            <!-- Upcoming Sessions -->
            <section class="db-card">
                <div class="db-card__head"><h3 class="db-card__title">Upcoming Sessions</h3></div>
                @if (IsLoadingSessions)
                {
                    <div class="db-list__row"><div class="db-list__text">Loading sessions...</div></div>
                }
                else if (!UpcomingSessions.Any())
                {
                    <div class="db-list__row"><div class="db-list__text">No upcoming sessions scheduled</div></div>
                }
                else
                {
                    <ul class="db-list db-list--sessions">
                        @foreach (var session in UpcomingSessions)
                        {
                            <li class="db-list__row">
                                <div>
                                    <div class="db-list__name">@session.ModuleName</div>
                                    <div class="db-list__text">With @session.ParticipantName • @session.TimeDisplay</div>
                                </div>
                                <div style="display: flex; gap: 8px;">
                                    <button class="db-chip" @onclick="() => JoinUpcomingSessionAsync(session)" style="background: #10b981; color: white; border: none; cursor: pointer;">Join</button>
                                    <a href="#" class="db-chip">Details</a>
                                </div>
                            </li>
                        }
                    </ul>
                }
                <div class="db-card__foot"><a href="/calendar/overview" class="db-card__link" id="viewAllSessionsLink">View all sessions</a></div>
            </section>
        </div>
    </div>

    <!-- ================== MODALS ================== -->
    <div class="modal" id="modalPhoto" aria-hidden="true">
        <div class="modal__card" role="dialog" aria-modal="true" aria-labelledby="modalPhotoTitle">
            <div class="modal__head"><span id="modalPhotoTitle">Change Photo</span><button class="btn btn--ghost" data-close="modalPhoto">✕</button></div>
            <div class="modal__body">
                <div class="photo-row">
                    <img id="photoPreview" src="https://i.pravatar.cc/80?img=3" alt="Preview">
                    <div>
                        <input type="file" id="photoInput" accept="image/*">
                        <div class="muted" style="margin-top:6px">PNG/JPG up to ~2MB works best.</div>
                    </div>
                </div>
            </div>
            <div class="modal__foot"><button class="btn" data-close="modalPhoto">Cancel</button><button class="btn btn--primary" id="savePhotoBtn">Save</button></div>
        </div>
    </div>

    <div class="modal" id="modalSettings" aria-hidden="true">
        <div class="modal__card" role="dialog" aria-modal="true" aria-labelledby="modalSettingsTitle">
            <div class="modal__head"><span id="modalSettingsTitle">Profile Settings</span><button class="btn btn--ghost" data-close="modalSettings">✕</button></div>
            <div class="modal__body">
                <div class="field"><label for="firstName">First name</label><input id="firstName" type="text" placeholder="Jane"></div>
                <div class="field"><label for="lastName">Last name</label><input id="lastName" type="text" placeholder="Doe"></div>
                <div class="field">
                    <label for="degree">Degree</label>
                    <select id="degree"><option value="">Select…</option><option>BComp</option><option>BIT</option><option>DIT</option><option>Other</option></select>
                </div>
                <div class="muted">These preferences are stored locally on this browser.</div>
            </div>
            <div class="modal__foot"><button class="btn" data-close="modalSettings">Cancel</button><button class="btn btn--primary" id="saveSettingsBtn">Save</button></div>
        </div>
    </div>

    <div class="modal" id="modalBadges" aria-hidden="true">
        <div class="modal__card" role="dialog" aria-modal="true" aria-labelledby="modalBadgesTitle">
            <div class="modal__head"><span id="modalBadgesTitle">Your Achievements</span><button class="btn btn--ghost" data-close="modalBadges">✕</button></div>
            <div class="modal__body">
                <ul style="margin:0;padding-left:18px">
                    <li><strong>Active Learner</strong> — asked 10+ questions this week</li>
                    <li><strong>Helper</strong> — answered 3 peer questions</li>
                    <li><strong>On Track</strong> — met your weekly goal</li>
                </ul>
            </div>
            <div class="modal__foot"><button class="btn btn--primary" data-close="modalBadges">Nice!</button></div>
        </div>
    </div>
</div>

<script>
    (function initTheme() { try { const saved = localStorage.getItem('theme'); if (saved === 'dark') { document.documentElement.classList.add('theme-dark'); } } catch (_) { } })()
    function toggleTheme() { const el = document.documentElement; const isDark = el.classList.toggle('theme-dark'); try { localStorage.setItem('theme', isDark ? 'dark' : 'light') } catch (_) { } }

    (function wireNav() {
        const nav = document.getElementById('mainNav'); if (!nav) return;
        nav.addEventListener('click', (e) => {
            const a = e.target.closest('a'); if (!a) return;
            const href = (a.getAttribute('href') || '').trim();
            [...nav.querySelectorAll('a')].forEach(x => x.classList.remove('db-nav__link--active'));
            a.classList.add('db-nav__link--active');
            if (href === '' || href === '#') { e.preventDefault(); }
        }, { passive: false });
    })();

    (function wireActions() {
        const searchWrap = document.getElementById('searchWrap');
        const searchBtn = document.getElementById('btnSearch');
        const searchInput = document.getElementById('searchInput');
        const btnNotif = document.getElementById('btnNotif');
        const popNotif = document.getElementById('popNotif');
        const btnProfile = document.getElementById('btnProfile');
        const popProfile = document.getElementById('popProfile');
        function closeAll() { searchWrap.classList.remove('open'); popNotif.classList.remove('show'); btnNotif.setAttribute('aria-expanded', 'false'); popProfile.classList.remove('show'); btnProfile.setAttribute('aria-expanded', 'false'); }
        searchBtn.addEventListener('click', (e) => { e.preventDefault(); const open = searchWrap.classList.toggle('open'); if (open) { searchInput.focus(); } popNotif.classList.remove('show'); popProfile.classList.remove('show'); });
        btnNotif.addEventListener('click', (e) => { e.preventDefault(); const showing = popNotif.classList.toggle('show'); btnNotif.setAttribute('aria-expanded', showing ? 'true' : 'false'); popProfile.classList.remove('show'); searchWrap.classList.remove('open'); });
        btnProfile.addEventListener('click', (e) => { e.preventDefault(); const showing = popProfile.classList.toggle('show'); btnProfile.setAttribute('aria-expanded', showing ? 'true' : 'false'); popNotif.classList.remove('show'); searchWrap.classList.remove('open'); });
        document.addEventListener('click', (e) => { const within = e.target.closest('#actionsBar'); const inLeft = e.target.closest('.db-topbar__left'); if (!(within || inLeft)) closeAll(); });
    })();

    (function profileUX() {
        const avatarImg = document.getElementById('avatarImg');
        const popProfile = document.getElementById('popProfile');

        // open modals
        document.querySelectorAll('#popProfile .clickable[data-target]').forEach(li => {
            li.addEventListener('click', () => { const target = li.getAttribute('data-target'); if (target) { document.querySelector(target)?.classList.add('show'); } });
        });

        // logout action
        const logoutItem = popProfile.querySelector('[data-action="logout"]');
        if (logoutItem) {
            logoutItem.addEventListener('click', () => {
                try {
                    // clear the items this page saved
                    localStorage.removeItem('profile.photo');
                    localStorage.removeItem('profile.first');
                    localStorage.removeItem('profile.last');
                    localStorage.removeItem('profile.degree');
                    localStorage.removeItem('messages.openChat');
                    localStorage.removeItem('mymodules.selected');
                    // if you store tokens/cookies elsewhere, also clear them here
                } catch (_) { }
                window.location.href = '/login';
            });
        }

        // modal close wiring
        document.querySelectorAll('.modal').forEach(m => { m.addEventListener('click', (e) => { if (e.target === m) m.classList.remove('show'); }); });
        document.querySelectorAll('[data-close]').forEach(btn => { btn.addEventListener('click', () => { document.getElementById(btn.getAttribute('data-close'))?.classList.remove('show'); }); });
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape') { document.querySelectorAll('.modal.show').forEach(m => m.classList.remove('show')); } });

        // photo preview & save
        const photoInput = document.getElementById('photoInput'); const photoPreview = document.getElementById('photoPreview'); const savePhotoBtn = document.getElementById('savePhotoBtn');
        photoInput.addEventListener('change', () => { const f = photoInput.files?.[0]; if (!f) return; const r = new FileReader(); r.onload = () => { photoPreview.src = r.result; }; r.readAsDataURL(f); });
        savePhotoBtn.addEventListener('click', () => { try { localStorage.setItem('profile.photo', photoPreview.src); avatarImg.src = photoPreview.src; } catch (_) { } document.getElementById('modalPhoto').classList.remove('show'); });

        // settings save/load
        const firstName = document.getElementById('firstName'); const lastName = document.getElementById('lastName'); const degree = document.getElementById('degree');
        document.getElementById('saveSettingsBtn').addEventListener('click', () => { try { localStorage.setItem('profile.first', firstName.value.trim()); localStorage.setItem('profile.last', lastName.value.trim()); localStorage.setItem('profile.degree', degree.value); } catch (_) { } document.getElementById('modalSettings').classList.remove('show'); });
        (function load() { try { const p = localStorage.getItem('profile.photo'); if (p) { avatarImg.src = p; const prev = document.getElementById('photoPreview'); if (prev) prev.src = p; } firstName.value = localStorage.getItem('profile.first') || ''; lastName.value = localStorage.getItem('profile.last') || ''; degree.value = localStorage.getItem('profile.degree') || ''; } catch (_) { } })();
    })();

    (function activeChatsRouting() {
        document.querySelectorAll('.chat-jump').forEach(li => {
            li.addEventListener('click', () => {
                const conversationId = li.getAttribute('data-chat') || '';
                try {
                    localStorage.setItem('messages.openChat', conversationId);
                } catch (_) { }
                window.location.href = '/messages?chat=' + encodeURIComponent(conversationId);
            });
        });
    })();

    (function moduleRouting() {
        document.querySelectorAll('.module-link').forEach(a => {
            a.addEventListener('click', () => {
                const li = a.closest('.db-module'); if (!li) return;
                const nameEl = li.querySelector('.db-module__name'); const descEl = li.querySelector('.db-module__desc'); const iconEl = li.querySelector('.db-module__icon');
                const code = li.getAttribute('data-code') || (nameEl?.textContent?.trim() || '');
                const mod = { code, name: nameEl?.textContent?.trim() || code, desc: descEl?.textContent?.trim() || '', colorClass: Array.from(iconEl?.classList || []).find(c => c.startsWith('db-module__icon--')) || '' };
                try { localStorage.setItem('mymodules.selected', JSON.stringify(mod)); } catch (_) { }
            }, { passive: true });
        });
    })();
</script>

@code {
    @using Tutorly.Shared;
    @using Tutorly.Client.Services;
    @using System.Net.Http.Json;

    [Inject] private ModuleService ModuleService { get; set; } = default!;
    [Inject] private JwtHttpClient Http { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    private List<StudentModuleTutor> MyModules = new();
    private bool IsLoadingModules = true;

    // Active chats
    private List<ConversationDto> RecentChats = new();
    private bool IsLoadingChats = true;

    // Upcoming sessions
    private List<UpcomingSessionDto> UpcomingSessions = new();
    private bool IsLoadingSessions = true;

    // Will be set from authentication context
    private int CurrentStudentId = 1;

    protected override async Task OnInitializedAsync()
    {
        // Get current student ID from authentication
        await GetCurrentStudentId();

        await LoadMyModules();
        await LoadRecentChats();
        await LoadUpcomingSessions();

        // Listen for calendar refresh events
        await JS.InvokeVoidAsync("addCalendarRefreshListener", DotNetObjectReference.Create(this));
    }

    private async Task LoadMyModules()
    {
        try
        {
            IsLoadingModules = true;
            MyModules = await ModuleService.GetStudentModulesWithTutors(CurrentStudentId);
            Console.WriteLine($"Loaded {MyModules.Count} modules for student {CurrentStudentId}");

            // Log each module for debugging
            foreach (var module in MyModules)
            {
                Console.WriteLine($"Module: {module.ModuleCode} - {module.ModuleName}, Tutor: {module.TutorName}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading modules: {ex.Message}");
            MyModules = new List<StudentModuleTutor>();
        }
        finally
        {
            IsLoadingModules = false;
        }
    }

    private async Task LoadRecentChats()
    {
        try
        {
            IsLoadingChats = true;

            // Get conversations from the API
            var response = await Http.GetFromJsonAsync<ServiceResult<List<ConversationDto>>>(
                "/api/messaging/conversations?pageSize=3"
            );

            if (response?.Success == true && response?.Data != null)
            {
                // Sort by last message time and take the 3 most recent
                RecentChats = response.Data
                    .Where(c => c.LastMessageAt.HasValue)
                    .OrderByDescending(c => c.LastMessageAt)
                    .Take(3)
                    .ToList();
            }
            else
            {
                RecentChats = new List<ConversationDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent chats: {ex.Message}");
            RecentChats = new List<ConversationDto>();
        }
        finally
        {
            IsLoadingChats = false;
        }
    }

    private async Task LoadUpcomingSessions()
    {
        try
        {
            IsLoadingSessions = true;

            // Get upcoming sessions from the API
            var response = await Http.GetFromJsonAsync<List<UpcomingSessionDto>>(
                $"/api/booking/upcoming-sessions/{CurrentStudentId}?limit=3"
            );

            if (response != null)
            {
                UpcomingSessions = response;
                Console.WriteLine($"Loaded {UpcomingSessions.Count} upcoming sessions for student {CurrentStudentId}");
            }
            else
            {
                UpcomingSessions = new List<UpcomingSessionDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading upcoming sessions: {ex.Message}");
            UpcomingSessions = new List<UpcomingSessionDto>();
        }
        finally
        {
            IsLoadingSessions = false;
        }
    }

    private async Task GetCurrentStudentId()
    {
        try
        {
            // Get user profile to extract student ID
            var profile = await Http.GetFromJsonAsync<UnifiedSessionDto>("/api/profile/me");
            if (profile?.Profile?.StudentId != null)
            {
                CurrentStudentId = profile.Profile.StudentId.Value;
                Console.WriteLine($"DEBUG: Student Dashboard - Using StudentId: {CurrentStudentId}");
            }
            else
            {
                Console.WriteLine("DEBUG: Student Dashboard - No valid student ID found in profile");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting current student ID: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task RefreshCalendarData()
    {
        await LoadUpcomingSessions();
        StateHasChanged();
    }

    private async Task JoinUpcomingSessionAsync(UpcomingSessionDto session)
    {
        try
        {
            // Ensure we have a session id
            if (session.SessionId == Guid.Empty)
            {
                return;
            }

            // Ask backend to create or return the study room for this session
            var resp = await Http.PostAsync($"/api/booking/sessions/{session.SessionId}/start-room", null);

            if (resp.IsSuccessStatusCode)
            {
                var result = await resp.Content.ReadFromJsonAsync<object>();
                var roomId = result?.GetType().GetProperty("RoomId")?.GetValue(result)?.ToString();

                if (!string.IsNullOrEmpty(roomId) && Guid.TryParse(roomId, out var roomGuid))
                {
                    // Navigate to the study room
                    Nav.NavigateTo($"/calendar/session/{roomGuid}");
                }
                else
                {
                    Console.WriteLine("Failed to get room ID from response");
                }
            }
            else
            {
                Console.WriteLine($"Failed to start room: {resp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining session: {ex.Message}");
        }
    }

    private string GetModuleColor(string moduleCode)
    {
        // Generate consistent colors based on module code
        var colors = new[] { "rose", "blue", "green", "yellow", "purple", "orange" };
        var hash = moduleCode.GetHashCode();
        return colors[Math.Abs(hash) % colors.Length];
    }

    private string GetTimeAgo(DateTime? lastMessageAt)
    {
        if (!lastMessageAt.HasValue)
            return "No messages";

        var timeSpan = DateTime.UtcNow - lastMessageAt.Value;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        else if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        else if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        else
            return lastMessageAt.Value.ToString("MMM d");
    }

    private string GetOtherParticipantName(ConversationDto conversation)
    {
        // For direct conversations, get the other participant's name
        if (conversation.ConversationType == ConversationType.Direct && conversation.Participants.Count >= 2)
        {
            // Find the participant that's not the current user
            // For now, we'll take the first participant that's not the first one
            // In a real implementation, you'd compare against the actual current user ID
            var otherParticipant = conversation.Participants.Skip(1).FirstOrDefault() ?? conversation.Participants.FirstOrDefault();
            return otherParticipant?.FullName ?? "Unknown User";
        }

        // For group conversations, use the group name
        return conversation.GroupName ?? "Group Chat";
    }

    private string GetOtherParticipantAvatar(ConversationDto conversation)
    {
        // For direct conversations, get the other participant's avatar
        if (conversation.ConversationType == ConversationType.Direct && conversation.Participants.Count >= 2)
        {
            var otherParticipant = conversation.Participants.Skip(1).FirstOrDefault() ?? conversation.Participants.FirstOrDefault();
            return otherParticipant?.AvatarUrl ?? "https://i.pravatar.cc/44?img=1";
        }

        // For group conversations, use group avatar or default
        return conversation.GroupAvatarUrl ?? "https://i.pravatar.cc/44?img=7";
    }
}

<script>
    // Add calendar refresh listener
    window.addCalendarRefreshListener = function (component) {
        window.addEventListener('calendarRefresh', function () {
            component.invokeMethodAsync('RefreshCalendarData');
        });
    };
</script>
