@page "/"
@page "/login"
@inject IJSRuntime JS
@inject JwtHttpClient Http
@inject NavigationManager Nav
@inject ServerAuthStateProvider Auth

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using System.ComponentModel.DataAnnotations
@using Tutorly.Client.Services

<PageTitle>Login | Belgium Campus Learning Portal</PageTitle>

<div class="login-page">

    <!-- Compact dashboard-style theme button -->
    <button id="theme-toggle-btn" class="theme-btn" type="button" aria-label="Toggle theme">
        <!-- Sun + Moon; CSS shows the right one -->
        <svg class="icon-sun" viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <circle cx="12" cy="12" r="4"></circle>
            <path d="M12 2v2M12 20v2M4.93 4.93l1.41 1.41M17.66 17.66l1.41 1.41M2 12h2M20 12h2M4.93 19.07l1.41-1.41M17.66 6.34l1.41-1.41"></path>
        </svg>
        <svg class="icon-moon" viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <path d="M21 12.79A9 9 0 1 1 11.21 3a7 7 0 0 0 9.79 9.79z"></path>
        </svg>
    </button>

    <!-- Page -->
    <div class="min-h-screen flex items-center justify-center p-4" style="font-family: 'Inter', sans-serif; background-color: var(--page-bg);">
        <div class="max-w-md w-full space-y-8">
            <div class="text-center">
                <div class="flex justify-center">
                    <div class="icon-badge gradient-bg rounded-lg shadow-lg">
                        <i data-feather="book-open" class="text-white w-7 h-7"></i>
                    </div>
                </div>
                <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                    Welcome back
                </h2>
                <p class="mt-2 text-sm text-gray-600">
                    Please sign in to your Belgium Campus account
                </p>
            </div>

            <div class="bg-white py-8 px-6 shadow rounded-lg sm:px-10">
                <EditForm class="mb-0 space-y-6" Model="@model" OnValidSubmit="SubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- EMAIL -->
                    <div>
                        <div class="mt-1 flex items-center gap-3">
                            <i data-feather="mail" class="h-5 w-5 text-gray-400"></i>
                            <div class="neo-field w-full">
                                <InputText id="email" name="email" type="email" autocomplete="email" required
                                           class="neo-input"
                                           @bind-Value="model.Email"
                                           placeholder="you@belgiumcampus.ac.za" />
                                <label for="email" class="neo-label">Email address</label>
                            </div>
                        </div>
                    </div>

                    <!-- PASSWORD -->
                    <div>
                        <div class="mt-1 flex items-center gap-3">
                            <i data-feather="lock" class="h-5 w-5 text-gray-400"></i>
                            <div class="neo-field w-full">
                                <InputText id="password" name="password" type="password" autocomplete="current-password" required
                                           class="neo-input"
                                           @bind-Value="model.Password"
                                           placeholder="••••••••" />
                                <label for="password" class="neo-label">Password</label>
                            </div>
                        </div>
                    </div>

                    <div class="flex items-center justify-between">
                        <label class="ux-check">
                            <InputCheckbox id="remember-me" name="remember-me" @bind-Value="model.RememberMe" />
                            <svg viewBox="0 0 64 64" aria-hidden="true">
                                <path class="ux-check__path"
                                      pathLength="575.0541381835938"
                                      d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16">
                                </path>
                            </svg>
                            <span class="text-sm text-gray-700">Remember me</span>
                        </label>

                        <div class="text-sm">
                            <a href="/auth/forgot" class="font-medium text-indigo-600 hover:text-indigo-500">
                                Forgot password?
                            </a>
                        </div>
                    </div>

                    <div class="form-actions mt-4">
                        <button type="submit"
                                class="btn-3d btn-3d--tiny btn-3d--fixed"
                                disabled="@isBusy">
                            @(isBusy ? "Signing in..." : "Sign in")
                        </button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(error))
                    {
                        <div class="mt-4 bg-red-50 border-l-4 border-red-400 p-3 rounded">
                            <p class="text-sm text-red-700">@error</p>
                        </div>
                    }
                </EditForm>

                <div class="mt-6">
                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-white text-gray-500">
                                New to Belgium Campus?
                            </span>
                        </div>
                    </div>

                    <div class="form-actions mt-6">
                        <a href="/auth/register"
                           class="btn-3d btn-3d--tiny btn-3d--fixed">
                            Create an account
                        </a>
                    </div>
                </div>
            </div>

            <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i data-feather="info" class="h-5 w-5 text-blue-400"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-blue-700">
                            This portal is exclusively for Belgium Campus students and staff. Please use your @@student.belgiumcampus.ac.za email.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private bool isBusy;
    private string? error;
    private string? returnUrl;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = query["returnUrl"];
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try { await JS.InvokeVoidAsync("eval", "if (typeof feather !== 'undefined') feather.replace();"); } catch { }
        }
    }

    private async Task SubmitAsync()
    {
        error = null;
        isBusy = true;
        try
        {
            var req = new HttpRequestMessage(HttpMethod.Post, "api/auth/signin")
                {
                    Content = JsonContent.Create(new { Email = model.Email, Password = model.Password })
                };
            req.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

            // Add timeout handling
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));
            var resp = await Http.SendAsync(req, cts.Token);
            if (resp.IsSuccessStatusCode)
            {
                var content = await resp.Content.ReadAsStringAsync();
                var json = System.Text.Json.JsonDocument.Parse(content).RootElement;

                if (json.TryGetProperty("accessToken", out var at))
                    await JS.InvokeVoidAsync("localStorage.setItem", "accessToken", at.GetString());
                if (json.TryGetProperty("refreshToken", out var rt))
                    await JS.InvokeVoidAsync("localStorage.setItem", "refreshToken", rt.GetString());

                if (Auth is not null) await Auth.RefreshAsync();

                if (model.RememberMe)
                    await JS.InvokeVoidAsync("localStorage.setItem", "rememberEmail", model.Email);
                else
                    await JS.InvokeVoidAsync("localStorage.removeItem", "rememberEmail");

                var dest = string.IsNullOrWhiteSpace(returnUrl) ? "/Redirect" : returnUrl!;
                Nav.NavigateTo(dest, replace: true);
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                error = string.IsNullOrWhiteSpace(msg)
                    ? "Sign-in failed. Please check your credentials or confirm your email."
                    : msg;
            }
        }
        catch (OperationCanceledException)
        {
            error = "Request timed out. Please check your internet connection and try again.";
        }
        catch (HttpRequestException ex)
        {
            error = $"Connection error: {ex.Message}";
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    private class LoginModel
    {
        [Required, EmailAddress] public string Email { get; set; } = string.Empty;
        [Required] public string Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; }
    }
}
<script>
    (function () {
        const STORAGE_KEY = 'theme';
        const root = document.documentElement;
        const btn = document.getElementById('theme-toggle-btn');

        function applyTheme(mode) {
            if (mode === 'dark') root.setAttribute('data-theme', 'dark');
            else root.removeAttribute('data-theme');
        }

        let saved = null;
        try { saved = localStorage.getItem(STORAGE_KEY); } catch { }
        if (!saved) {
            saved = (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? 'dark' : 'light';
        }
        applyTheme(saved);

        btn?.addEventListener('click', () => {
            const next = root.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
            applyTheme(next);
            try { localStorage.setItem(STORAGE_KEY, next); } catch { }
        });

        try {
            const mql = window.matchMedia('(prefers-color-scheme: dark)');
            mql.addEventListener?.('change', e => {
                const userSet = localStorage.getItem(STORAGE_KEY);
                if (!userSet) applyTheme(e.matches ? 'dark' : 'light');
            });
        } catch { }
    })();
</script>