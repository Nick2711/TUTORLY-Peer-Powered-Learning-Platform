@page "/auth/register"
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

<PageTitle>Register | Belgium Campus Learning Portal</PageTitle>

<div class="register-page">

    <!-- Theme (top-right): compact dashboard-style toggle -->
    <div class="fixed top-4 right-4 z-50">
        <button id="theme-toggle" class="theme-btn" aria-label="Toggle theme"></button>
    </div>

    <!-- Page -->
    <div class="min-h-screen flex items-center justify-center p-4" style="font-family: 'Inter', sans-serif; background-color: var(--page-bg);">
        <div class="max-w-md w-full space-y-8">
            <div class="text-center">
                <div class="flex justify-center">
                    <div class="gradient-bg p-3 rounded-lg shadow-lg inline-flex">
                        <i data-feather="user-plus" class="text-white w-8 h-8"></i>
                    </div>
                </div>
                <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                    Create your account
                </h2>
                <p class="mt-2 text-sm text-gray-600">
                    Join the Belgium Campus learning community
                </p>
            </div>

            <!-- Card -->
            <div class="bg-white py-8 px-6 shadow rounded-lg sm:px-10">
                <form class="mb-0 space-y-6" action="#" method="POST"
                      @onsubmit="SubmitAsync" @onsubmit:preventDefault>

                    <!-- EMAIL -->
                    <div>
                        <div class="mt-1 flex items-center gap-3">
                            <i data-feather="mail" class="h-5 w-5 text-gray-400"></i>
                            <div class="neo-field w-full">
                                <input id="email" name="email" type="email" autocomplete="email" required
                                       class="neo-input"
                                       placeholder="you@belgiumcampus.ac.za"
                                       @bind="model.Email" @bind:event="oninput" />
                                <label for="email" class="neo-label">Email address</label>
                            </div>
                        </div>
                    </div>

                    <!-- PASSWORD -->
                    <div>
                        <div class="mt-1 flex items-center gap-3">
                            <i data-feather="lock" class="h-5 w-5 text-gray-400"></i>
                            <div class="neo-field w-full">
                                <input id="password" name="password" type="password" autocomplete="new-password" required
                                       class="neo-input"
                                       placeholder="••••••••"
                                       @bind="model.Password" @bind:event="oninput" />
                                <label for="password" class="neo-label">Password</label>
                            </div>
                        </div>
                    </div>

                    <!-- CONFIRM PASSWORD -->
                    <div>
                        <div class="mt-1 flex items-center gap-3">
                            <i data-feather="lock" class="h-5 w-5 text-gray-400"></i>
                            <div class="neo-field w-full">
                                <input id="confirm-password" name="confirm-password" type="password" required
                                       class="neo-input"
                                       placeholder="••••••••"
                                       @bind="model.ConfirmPassword" @bind:event="oninput" />
                                <label for="confirm-password" class="neo-label">Confirm Password</label>
                            </div>
                        </div>
                    </div>

                    <!-- ROLE -->
                    <div>
                        <label class="block text-sm font-medium role-title mb-2">
                            I am a:
                        </label>
                        <div class="grid grid-cols-2 gap-4">
                            <label class="role-selector">
                                <input type="radio" name="role" value="student" class="sr-only"
                                       checked="@(string.Equals(model.Role, "student", StringComparison.OrdinalIgnoreCase))"
                                       @onchange="OnRoleChanged">
                                <div class="border rounded-lg p-4 flex flex-col items-center cursor-pointer transition-colors duration-150">
                                    <i data-feather="book" class="h-6 w-6 text-green-600 mb-2"></i>
                                    <span class="text-sm font-medium">Student</span>
                                    <span class="text-xs text-gray-500 mt-1">No approval required</span>
                                </div>
                            </label>
                            <label class="role-selector">
                                <input type="radio" name="role" value="tutor" class="sr-only"
                                       checked="@(string.Equals(model.Role, "tutor", StringComparison.OrdinalIgnoreCase))"
                                       @onchange="OnRoleChanged">
                                <div class="border rounded-lg p-4 flex flex-col items-center cursor-pointer transition-colors duration-150">
                                    <i data-feather="users" class="h-6 w-6 text-green-600 mb-2"></i>
                                    <span class="text-sm font-medium">Tutor</span>
                                    <span class="text-xs text-gray-500 mt-1">Requires approval</span>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- TERMS AND CONDITIONS — animated checkbox (same as Login) -->
                    <div class="flex items-start">
                        <label class="ux-check">
                            <input type="checkbox" name="terms" required @bind="model.TermsAccepted" />
                            <svg viewBox="0 0 64 64" aria-hidden="true">
                                <path class="ux-check__path"
                                      pathLength="575.0541381835938"
                                      d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16">
                                </path>
                            </svg>
                            <span class="text-sm text-gray-700">
                                I agree to the <a href="#" class="text-indigo-600 hover:text-indigo-500">Terms of Service</a> and
                                <a href="#" class="text-indigo-600 hover:text-indigo-500">Privacy Policy</a>
                            </span>
                        </label>
                    </div>


                    <!-- Create -->
                    <div class="form-actions">
                        <button type="submit" class="btn-3d btn-3d--tiny btn-3d--fixed" disabled="@isBusy">
                            Create account
                        </button>
                    </div>
                </form>

                <div class="mt-6">
                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-white text-gray-500">
                                Already have an account?
                            </span>
                        </div>
                    </div>
                    <div class="form-actions">
                        <a href="/login" class="btn-3d btn-3d--tiny btn-3d--fixed">
                            Sign in instead
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Tutor Application Modal *@
    @if (showTutorModal)
    {
        <div class="modal-overlay" @onclick="CloseTutorModalBackground">
            <div class="modal-card" @onclick:stopPropagation>
                <div class="modal-header">
                    <h3 class="modal-title">Tutor application</h3>
                    <button class="modal-close" @onclick="() => showTutorModal = false" aria-label="Close">✕</button>
                </div>

                <div class="modal-body">
                    <div class="neo-field mb-3">
                        <input class="neo-input" placeholder="e.g. 20231234"
                               @bind="tutorForm.StudentNumber" @bind:event="oninput" />
                        <label class="neo-label">Student number</label>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div class="neo-field">
                            <input class="neo-input" placeholder="e.g. Thandi"
                                   @bind="tutorForm.FirstName" @bind:event="oninput" />
                            <label class="neo-label">Name</label>
                        </div>
                        <div class="neo-field">
                            <input class="neo-input" placeholder="e.g. Mokoena"
                                   @bind="tutorForm.LastName" @bind:event="oninput" />
                            <label class="neo-label">Surname</label>
                        </div>
                    </div>

                    <div class="mt-3">
                        <label class="block text-sm text-gray-600 mb-1">Upload transcript (PDF / image)</label>
                        <div class="upload-zone @(isDragOver ? "dragover" : "")"
                             @ondragover="() => isDragOver = true"
                             @ondragleave="() => isDragOver = false">
                            <div class="upload-zone__content">
                                <div class="upload-zone__title">Click to upload</div>
                                <div class="upload-zone__sub">or drag & drop your transcript here</div>
                                <div class="upload-zone__hint">PDF, PNG, JPG</div>
                            </div>
                            <InputFile OnChange="OnTranscriptSelected" accept=".pdf,image/*" class="drop-input" />
                        </div>

                        @if (!string.IsNullOrEmpty(tutorForm.TranscriptFileName))
                        {
                            <div class="text-xs text-gray-500 mt-2">
                                Selected: <strong>@tutorForm.TranscriptFileName</strong> (@tutorForm.TranscriptSizeKb KB)
                            </div>
                        }
                    </div>

                    <div class="mt-4">
                        <label class="block text-sm text-gray-600 mb-1">Add module(s)</label>
                        <div class="flex gap-2">
                            <select class="neo-input h-11" @bind="selectedModule">
                                @foreach (var m in moduleOptions)
                                {
                                    <option value="@m">@m</option>
                                }
                            </select>
                            <button class="tag-add-btn" type="button" @onclick="AddModuleTag">Add</button>
                        </div>

                        @if (tutorForm.Modules.Count > 0)
                        {
                            <div class="tag-list mt-3">
                                @foreach (var tag in tutorForm.Modules)
                                {
                                    <span class="tag-chip">
                                        @tag
                                        <button type="button" class="tag-remove" title="Remove" @onclick="@(() => RemoveModuleTag(tag))">×</button>
                                    </span>
                                }
                            </div>
                        }
                    </div>

                    <div class="mt-4">
                        <div class="neo-field">
                            <textarea class="neo-input neo-textarea" rows="4" placeholder="Tell us why you'd be a great tutor"
                                      @bind="tutorForm.Why" @bind:event="oninput"></textarea>
                            <label class="neo-label">Why do you want to be a tutor?</label>
                        </div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(tutorModalError))
                    {
                        <div class="tutor-error">@tutorModalError</div>
                    }
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn-ghost" @onclick="() => showTutorModal = false">Cancel</button>
                    <button type="button" class="btn-primary" @onclick="SaveTutorModal">Save</button>
                </div>
            </div>
        </div>
    }

</div>

@code {
    // ----- form model & state -----
    private RegisterModel model = new() { Role = "student" };
    private bool isBusy;

    // Tutor modal state
    private bool showTutorModal;
    private string? tutorModalError;
    private bool isDragOver;
    private TutorApplication tutorForm = new();
    private string selectedModule = "";
    private readonly List<string> moduleOptions = new()
  {
    "Mathematics 1", "Mathematics 2", "Statistics", "Programming 1",
    "Programming 2", "Data Structures", "Algorithms",
    "Databases", "Web Programming", "Operating Systems", "Networks"
  };

    // OTP state (unchanged bits removed for brevity)
    private bool showOtp;
    private string otpEmail = string.Empty;
    private string otpCode = string.Empty;
    private int otpSeconds;
    private bool otpBusy;
    private string? otpError;
    private string? otpInfo;
    private string? pendingPassword;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try { await JS.InvokeVoidAsync("eval", "if (typeof feather !== 'undefined') feather.replace();"); } catch { }
            try
            {
                await JS.InvokeVoidAsync("ui.enforceCampusEmail", "form", "#email", ".belgiumcampus.ac.za");
                await JS.InvokeVoidAsync("ui.enforcePasswordMatch", "form", "#password", "#confirm-password", "Passwords do not match");
            }
            catch { }
        }
    }

    private async Task SubmitAsync()
    {
        if (!model.TermsAccepted)
        {
            otpError = "You must accept the Terms.";
            showOtp = false;
            StateHasChanged();
            return;
        }
        if (!string.Equals(model.Password, model.ConfirmPassword, StringComparison.Ordinal))
        {
            otpError = "Passwords do not match.";
            showOtp = false;
            StateHasChanged();
            return;
        }

        if (string.Equals(model.Role, "tutor", StringComparison.OrdinalIgnoreCase))
        {
            if (!tutorForm.IsComplete())
            {
                tutorModalError = "Please complete all tutor details (student number, name, surname, transcript, at least one module, and your motivation).";
                showTutorModal = true;
                StateHasChanged();
                return;
            }
        }

        isBusy = true;
        try
        {
            pendingPassword = model.Password;
            otpEmail = model.Email;
            await SendOtpAsync();
            ShowOtpModal();
        }
        catch (Exception ex) { otpError = ex.Message; showOtp = true; }
        finally { isBusy = false; StateHasChanged(); }
    }

    private void OnRoleChanged(ChangeEventArgs e)
    {
        var v = e?.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(v))
        {
            model.Role = v!;
            if (string.Equals(model.Role, "tutor", StringComparison.OrdinalIgnoreCase))
                showTutorModal = true;
        }
    }

    // --- OTP + Tutor helpers (same as before) ---
    private void ShowOtpModal() { otpCode = ""; otpError = null; showOtp = true; }
    private async Task SendOtpAsync() { /* unchanged */ await Task.CompletedTask; }
    private async Task VerifyOtpAsync() { /* unchanged */ await Task.CompletedTask; }
    private async Task OnTranscriptSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        tutorForm.TranscriptFileName = file?.Name ?? "";
        if (file != null)
        {
            tutorForm.TranscriptSizeKb = Math.Max(1, (int)Math.Round(file.Size / 1024.0));
            tutorForm.Transcript = file;
        }
        isDragOver = false;
        await Task.CompletedTask;
    }
    private void CloseTutorModalBackground() => showTutorModal = false;
    private void AddModuleTag() { var m = (selectedModule ?? "").Trim(); if (string.IsNullOrEmpty(m)) return; if (!tutorForm.Modules.Contains(m)) tutorForm.Modules.Add(m); }
    private void RemoveModuleTag(string tag) => tutorForm.Modules.Remove(tag);
    private void SaveTutorModal() { if (!tutorForm.IsComplete()) { tutorModalError = "Please complete all tutor details (student number, name, surname, transcript, at least one module, and your motivation)."; return; } tutorModalError = null; showTutorModal = false; }

    private sealed class RegisterModel { public string Email { get; set; } = ""; public string Password { get; set; } = ""; public string ConfirmPassword { get; set; } = ""; public string Role { get; set; } = "student"; public bool TermsAccepted { get; set; } }
    private sealed class TutorApplication
    {
        public string StudentNumber { get; set; } = "";
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public List<string> Modules { get; set; } = new();
        public string Why { get; set; } = "";
        public string TranscriptFileName { get; set; } = "";
        public int TranscriptSizeKb { get; set; }
        public IBrowserFile? Transcript { get; set; }
        public bool IsComplete() => !string.IsNullOrWhiteSpace(StudentNumber) && !string.IsNullOrWhiteSpace(FirstName) && !string.IsNullOrWhiteSpace(LastName) && Transcript != null && Modules.Count > 0 && !string.IsNullOrWhiteSpace(Why);
    }
    private sealed class AnonTimer { public int seconds { get; set; } }
}

<script>
    (function () {
        const KEY = 'theme';
        const btn = document.getElementById('theme-toggle');
        const root = document.documentElement;

        function apply(mode) {
            if (mode === 'dark') { root.setAttribute('data-theme', 'dark'); btn?.classList.add('is-dark'); }
            else { root.removeAttribute('data-theme'); btn?.classList.remove('is-dark'); }
        }
        let saved = null;
        try { saved = localStorage.getItem(KEY); } catch (_) { }
        if (!saved) {
            saved = matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        apply(saved);

        btn?.addEventListener('click', () => {
            const next = root.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
            apply(next);
            try { localStorage.setItem(KEY, next); } catch (_) { }
        });

        try {
            const mq = matchMedia('(prefers-color-scheme: dark)');
            mq.addEventListener?.('change', e => {
                const userSet = localStorage.getItem(KEY);
                if (!userSet) apply(e.matches ? 'dark' : 'light');
            });
        } catch (_) { }
    })();
</script>