@using Tutorly.Client.Services
@inject StudyRoomHubService HubService
@inject StudyRoomWebRTCService WebRTCService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (IncomingCall != null)
{
    <div class="call-notification">
        <div class="call-notification__content">
            <div class="call-notification__avatar">
                <svg viewBox="0 0 24 24" width="48" height="48" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10" />
                    <path d="M8 14s1.5 2 4 2 4-2 4-2" />
                    <line x1="9" y1="9" x2="9.01" y2="9" />
                    <line x1="15" y1="9" x2="15.01" y2="9" />
                </svg>
            </div>
            <div class="call-notification__info">
                <strong>@IncomingCall.FromUserName</strong>
                <span>Incoming @(IncomingCall.CallType == CallType.Video ? "video" : "voice") call...</span>
            </div>
            <div class="call-notification__actions">
                <button class="btn-accept" @onclick="AcceptCall">
                    <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
                    </svg>
                    Accept
                </button>
                <button class="btn-reject" @onclick="RejectCall">
                    <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18" />
                        <line x1="6" y1="6" x2="18" y2="18" />
                    </svg>
                    Decline
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public CallInvitationDto? IncomingCall { get; set; }
    [Parameter] public EventCallback<bool> OnResponse { get; set; }

    private async Task AcceptCall()
    {
        if (IncomingCall == null)
        {
            Console.WriteLine("❌ CallNotification: IncomingCall is null, cannot accept call");
            return;
        }

        try
        {
            Console.WriteLine($"📞 CallNotification: ===== ACCEPTING INCOMING CALL =====");
            Console.WriteLine($"📞 CallNotification: Call ID: {IncomingCall.CallId}");
            Console.WriteLine($"📞 CallNotification: From: {IncomingCall.FromUserName}");
            Console.WriteLine($"📞 CallNotification: Room ID: {IncomingCall.RoomId}");
            Console.WriteLine($"📞 CallNotification: Call type: {IncomingCall.CallType}");

            // Check if we can accept this call
            if (!CallStateManager.Instance.CanAcceptCall())
            {
                Console.WriteLine($"❌ CallNotification: Cannot accept call - current state: {CallStateManager.Instance.CurrentState}");
                await JS.InvokeVoidAsync("alert", "Another call is already in progress. Please wait for it to complete.");
                return;
            }

            // Start accepting the call
            if (!CallStateManager.Instance.StartIncomingCall(IncomingCall.CallId))
            {
                Console.WriteLine($"❌ CallNotification: Failed to start accepting call");
                await JS.InvokeVoidAsync("alert", "Failed to accept call. Please try again.");
                return;
            }

            // Reset hub service and WebRTC state for incoming call
            Console.WriteLine("🔄 CallNotification: Resetting hub service and WebRTC state for incoming call...");
            await HubService.ResetForNewCallAsync();
            Console.WriteLine("✅ CallNotification: Hub service and WebRTC state reset complete");

            // Ensure StudyRoomHub is connected before responding
            var accessToken = await JS.InvokeAsync<string>("localStorage.getItem", "accessToken");
            if (!string.IsNullOrEmpty(accessToken))
            {
                Console.WriteLine("🔗 CallNotification: Ensuring StudyRoomHub connection...");
                await HubService.ConnectAsync(accessToken);
                Console.WriteLine("✅ CallNotification: Connected to StudyRoomHub");
            }
            else
            {
                Console.WriteLine("❌ CallNotification: No access token found");
                await JS.InvokeVoidAsync("alert", "Authentication error. Please refresh the page.");
                return;
            }

            var response = new CallResponseDto
                {
                    CallId = IncomingCall.CallId,
                    RoomId = IncomingCall.RoomId,
                    Accepted = true,
                    RespondingUserId = IncomingCall.ToUserId
                };

            Console.WriteLine($"📤 CallNotification: Sending call response: {response.CallId}");
            await HubService.RespondToCallAsync(response);

            Console.WriteLine("✅ CallNotification: Call response sent successfully");

            // Accept the call in state manager
            CallStateManager.Instance.AcceptCall();

            // Store room ID before clearing IncomingCall
            var roomId = IncomingCall.RoomId;

            await OnResponse.InvokeAsync(true);

            // Navigate to study room
            Console.WriteLine($"Navigating to session: {roomId}");
            Navigation.NavigateTo($"/calendar/session/{roomId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ CallNotification: Failed to accept call: {ex.Message}");
            Console.WriteLine($"❌ CallNotification: Stack trace: {ex.StackTrace}");

            // Reset call state on error
            CallStateManager.Instance.EndCall();

            await JS.InvokeVoidAsync("alert", $"Failed to accept call: {ex.Message}");
        }
    }

    private async Task RejectCall()
    {
        if (IncomingCall == null)
        {
            Console.WriteLine("❌ CallNotification: IncomingCall is null, cannot reject call");
            return;
        }

        try
        {
            Console.WriteLine($"📞 CallNotification: Rejecting call: {IncomingCall.CallId}");

            // Reject the call in state manager
            CallStateManager.Instance.RejectCall();

            // Ensure StudyRoomHub is connected before responding
            var accessToken = await JS.InvokeAsync<string>("localStorage.getItem", "accessToken");
            if (!string.IsNullOrEmpty(accessToken))
            {
                await HubService.ConnectAsync(accessToken);
            }

            var response = new CallResponseDto
                {
                    CallId = IncomingCall.CallId,
                    RoomId = IncomingCall.RoomId,
                    Accepted = false,
                    RespondingUserId = IncomingCall.ToUserId
                };

            Console.WriteLine($"📤 CallNotification: Sending call rejection: {response.CallId}");
            await HubService.RespondToCallAsync(response);

            Console.WriteLine("✅ CallNotification: Call rejection sent successfully");
            await OnResponse.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ CallNotification: Failed to reject call: {ex.Message}");
            Console.WriteLine($"❌ CallNotification: Stack trace: {ex.StackTrace}");

            // Reset call state on error
            CallStateManager.Instance.EndCall();

            await JS.InvokeVoidAsync("alert", $"Failed to reject call: {ex.Message}");
        }
    }
}
